了解JSP页面与加载规则
前面我们已经完成了整个Web应用程序生命周期中所有内容的学习 我们已经完全了解 如何编写一个Web应用程序 并放在Tomcat上部署运行
以及如何控制浏览器发来的请求 通过Session Filter实现用户登录验证 通过Cookie实现自动登录等操作 到目前为止 我们已经具备编写一个完整Web网站的能力

在之前的教程中 我们的前端静态页面没有与后端相结合 我们前端页面所需的数据全部需要单独向后端发起请求获取 并动态进行内容填充 这是一种典型的前后端分离写法
前端只负责要数据和显示数据 后端只负责处理数据和提供数据 这也是现在更流行的一种写法 让前端开发者和后端开发者各尽其职 更加专一 这才是我们所希望的开发模式

JSP并不是我们需要重点学习的内容 因为它已经过时了 使用JSP会导致前后端严重耦合 因此这里只做了解即可

JSP其实就是一种模板引擎 那么何谓模板引擎呢 顾名思义它就是一个模板 模板需要我们填入数据 才可以变成一个页面 也就是说 我们可以直接在前端页面中填写数据 填写后生成一个最终的HTML页面返回给前端

首先我们来创建一个新的Web项目 项目创建成功后 删除java目录下的内容 只留下默认创建的jsp文件 我们发现 在webapp目录中  存在一个index.jsp文件 现在我们直接运行项目 会直接访问这个JSP页面
                    <%@ page contentType="text/html;charset=UTF-8 pageEncoding="UTF-8" %>
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>JSP - Hello World</title>
                    </head>
                    <body>
                    <h1><%= "Hello World" %></h1>
                    <br/>
                    <a href="hello-servlet">Hello Servlet</a>
                    </body>
                    </html>
但是我们并没有编写对应的Servlet来解析啊 那么为什么这个JSP页面会被加载呢

实际上 我们一开始提到的两个Tomcat默认的Servlet中 一个是用于请求静态资源 还有一个就是用于处理JSP的:
                <!-- The mapping for the JSP servlet -->
                    <servlet-mapping>
                        <servlet-name>jsp</servlet-name>
                        <url-pattern>*.jsp</url-pattern>
                        <url-pattern>*.jspx</url-pattern>
                    </servlet-mapping>

那么 JSP和普通HTML页面有什么区别呢 我们发现它的语法和普通HTML页面几乎一致 我们可以直接在JSP中编写java代码 并在页面加载的时候执行 我们随便找一地方插入:
                    <%
                        System.out.println("JSP页面被加载")
                    %>

我们发现 请求一次页面 页面就好加载一次 并执行我们填写的java代码 也就是说 我们可以直接在此页面中执行java代码来填充我们的数据 这样我们的页面就变成了一个动态页面 使用<%= %>来填写一个值:
                    <h1><%= new Date().toString %></h1>
现在访问我们的网站 每次都会创建一个新的Date对象 因此每次访问获取的时间都不一样 我们的网站已经算是一个动态的网站了

虽然这样在一定程度上为我们提供了便利 但是这样的写法相当于整个页面既要编写前端代码 也要编写后端代码 随着项目的扩大 整个页面会显得难以阅读 并且现在都是前后端开发人员职责非常明确的
如果要编写JSP页面 那就必须要招一个前后端都会的程序员 这样显然会导致不必要的开销

那么我们来研究一下 为什么JSP页面能够在加载的时候执行java代码呢

首先我们将此项目打包 并在Tomcat服务端中运行 生成了一个文件夹并且可以正常访问

我们现在看到 work目录 我们发现这个里面多了一个index_jsp.java和index_jsp.class 那么这些东西是干嘛的呢 我们来反编译一下就啥都知道了

实际上 Tomcat在加载JSP页面时 会将其动态转换为一个java类并编译为class进行加载 而生成的java类 正是一个Servlet的子类
而页面的内容全部被编译为输出字符串 这便是JSP的加载原理 因此 JSP本质上依然是一个Servlet

如果感兴趣 可以查阅一下其他相关资料 这里不再讲解此技术


